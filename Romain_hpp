/*
 * Position.hpp
 *
 *  Created on: 3 Jul 2025
 *      Author: Romain,Adish,Alexe√Ø
 */

#ifndef POSITION_HPP_
#define POSITION_HPP_

#include <iostream>
#include <cmath>
#include <vector>
#include <cstdlib>

class Position{
public :
	int x;
	int y;

	Position() {
		x = 0;
	    y = 0;
	}

	Position(int a,int b){
		x=a;
		y=b;
	}
	void PrintPosition(Position *Robot){
		printf("x = %d\n",Robot->x);
		printf("y = %d\n",Robot->y);
	}

	void DestroyPosition(Position *Robot){
		delete Robot;
	}

	static std::vector<Position> GenerateArrayOfPositions(int array_number){

		std::vector<Position> object_vector(array_number); // Create a vector of objects (size = array_number)
		for(int i=0; i < array_number; i++){
		    object_vector[i].x= rand()%11; // Generate a random number between 0 and 10
			object_vector[i].y= rand()%11;
		}
		return object_vector;

	}

	float DistancePositions(Position *Robot,int target_x,int target_y){ // Calculate the distance between the robot and a position
		return sqrt((Robot->x-target_x)*(Robot->x-target_x)+(Robot->y-target_y)*(Robot->y-target_y));
	}

	Position *CreatePosition(int x, int y){
		Position *MyNewRobot=new Position(x,y);
		return MyNewRobot;
	}

	void destroyArrayOfPosition(std::vector<Position> arrayOfPosition,int i){
		//delete Robot;
		arrayOfPosition.erase(arrayOfPosition.begin() + i);
	}
};
#endif /* POSITION_HPP_ */
